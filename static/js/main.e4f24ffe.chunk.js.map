{"version":3,"sources":["components/utils.js","components/Header.jsx","components/Stage.jsx","components/Legend.jsx","components/Tip.jsx","components/Scatterplot.jsx","components/BarChart.jsx","components/Controls.jsx","components/NoteContext.js","components/Intro.jsx","components/DataTable.jsx","components/Scores.jsx","components/Profile.jsx","components/Survey.jsx","components/Choropleth.jsx","components/Risks.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["_filterByKey","data","key","value","first","_","cleanHdrLabels","lbl","hdr","cleanIdxLabels","fmt","fmtStr","d","undefined","format","getProfile","filterBy","filterVal","meta","profData","wide","m","val","indicator","display","filterForScatter","filterForBar","region","variable","out","level","getMapData","map","name","keyBy","getQMeta","getRegions","filter","uniq","RegExp","test","filterByString","string","matchKeys","keys","indexOf","compact","createScales","pals","rev","pal","n","groups","length","reverse","colorscale","scaleOrdinal","sizescale","makeChoroScale","scheme","nBrks","vals","mapValues","values","sort","brks","ckmeans","slice","scaleThreshold","domain","range","makeTooltip","Header","props","className","Navbar","expand","variant","bg","Toggle","aria-controls","Collapse","id","Nav","hdrs","h","to","location","Link","title","Stage","type","versus","colon","comma","lblBy","lblBy2","Card","as","hdrComponents","Body","flush","children","Footer","axisLbl","legendTypes","threshold","LegendThreshold","ordinal","LegendOrdinal","Legend","LegendByType","labelFormat","label","style","scale","Tip","lbls","tipLblr","vs","content","i","numFmt","hover","x","y","color","cx","cy","r","fillOpacity","strokeOpacity","stroke","fill","Scatterplot","xAccess","yAccess","Vivid","xRange","yRange","points","margin","top","right","bottom","left","size","xAccessor","yAccessor","pointStyle","opacity","xExtent","yExtent","axes","orient","baseline","tickFormat","responsiveWidth","hoverAnnotation","svgAnnotationRules","screenCoordinates","tooltipContent","match","join","substring","titleLabel","BarChart","colorVar","labels","rAccess","oAccess","oAccessor","rAccessor","oPadding","oLabel","projection","strokeWidth","annotations","lblRules","pieceHoverAnnotation","IdxBarChart","QBarChart","coords","isNaN","small","transform","dx","dy","ScoreMainControls","register","useFormContext","Form","Row","Col","Group","controlId","Label","Control","ref","onChange","variables","regions","ScoreCompareControls","yvariables","concat","v1","SparkControls","Check","inline","custom","checked","SurveyTopicFragment","Fragment","topics","topicMeta","SurveyMainControls","SurveyProfileControls","categories","Object","e","j","RiskMainControls","NoteContext","React","createContext","noteOpen","handleClose","Intro","Consumer","Alert","dismissible","onClose","Heading","source","intro","escapeHtml","page","href","makeSpark","col","maxes","cell","row","rowIndex","extraData","max","w","width","DataTable","spark","isCommunity","omit","colNames","difference","tblColumns","numberCols","pickBy","c","q","getMaxes","cols","formatter","isNumber","dataField","text","classes","headerClasses","formatExtraData","align","bootstrap4","condensed","bordered","keyField","columns","Scores","index_data","index_comps","formMethods","useForm","mode","flatMap","pull","initValues","v2","useState","setV1","setV2","setRegion","setSpark","onFormChange","getValues","v1Select","v2Select","regSelect","Container","md","handleSubmit","grouping","dataBy","target","Profile","headerStyle","Survey","cws_data","topic","group","setTopic","setIndicator","setGroup","topicSelect","qSelect","grpSelect","q0","g0","setValue","qDisplay","groupBy","profileData","denom","Choropleth","getStyle","feature","properties","fillColor","weight","handleFeature","layer","on","featureHilite","featureUnhilite","bindTooltip","direction","offset","setStyle","shp","bbox","geo","b","topojson","getBounds","this","shape","objects","town","Map","bounds","zoomSnap","zoomDelta","scrollWheelZoom","TileLayer","url","attribution","subdomains","minZoom","maxZoom","ext","GeoJSON","interactive","onEachFeature","onClick","Component","Risks","town_data","towns","setTown","mapData","palette","dl","urls","slug","toLowerCase","dw","github","survey","risks","scores","App","obj","download","useLocation","pathname","dl_meta","useDownload","setNoteOpen","v","k","exact","path","render","Provider","cws_meta","intro_txt","bytown","omitBy","town_topo","score_meta","Boolean","window","hostname","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4f24ffe.chunk.js","sourcesContent":["import * as _ from 'lodash';\nimport { scaleOrdinal, scaleThreshold } from 'd3-scale';\nimport wordwrap from 'wordwrapjs';\nimport { format } from 'd3-format';\nimport * as topojson from 'topojson-client';\nimport { ckmeans } from 'simple-statistics';\n\n/////////////// general utilities\nconst _filterByKey = (data, key, value, first = true) => (\n  first ? _.find(data, { [key]: value }) : _.filter(data, { [key]: value })\n);\n\n/////////////// strings\nconst cleanHdrLabels = (lbl, first = true) => {\n  const hdr = _.replace(lbl, /_/g, ' ');\n  return first ? _.upperFirst(hdr) : _.startCase(hdr);\n};\n\nconst cleanIdxLabels = (lbl) => (\n  cleanHdrLabels(lbl, false) + ' Index'\n);\n\nconst cleanKeys = (obj, first = true) => (\n  _.chain(obj)\n    .keys()\n    .map((d) => cleanHdrLabels(d, first))\n    .value()\n);\n\nconst titleLabel = (lbl, n = 2) => (\n  _.upperFirst(lbl.substring(n))\n);\n\nconst wrapTspan = (txt) => (\n  wordwrap.lines(txt, { width: 15 })\n);\n\nconst compileHeader = (type) => {\n  const headers = {\n    versus: '<%= lbls[0] %> vs. <%= lbls[1] %>',\n    colon: '<%= lbl %>: <%= dataBy %>, <%= grouping %>',\n    comma: '<%= lbl %>, <%= grouping %>',\n    lblBy: '<%= lbl %> by <%= dataBy %>',\n    lblBy2: '<%= lbl %> by <%= dataBy %>, <%= grouping %>'\n  };\n  return _.template(headers[type]);\n};\n\nconst fmt = (fmtStr) => (\n  (d) => (d === null || d === undefined ? 'N/A' : format(fmtStr)(d))\n);\n\n/////////////// data munging\n// const getProfile = (data, filterBy, filterVal, meta) => (\n//   _.chain(data)\n//     .find((d) => d.group === group)\n//     .omit(['category', 'group'])\n//     .toPairs()\n//     .map((d) => ({ indicator: d[0], display: getQMeta(meta, d[0]).display, value: d[1] }) )\n//     .orderBy('display')\n//     .value()\n// );\n\nconst getProfile = (data, filterBy, filterVal, meta, omit = null) => {\n  const profData = _filterByKey(data, filterBy, filterVal, true);\n  const wide = _.map(meta, (m) => {\n    const format = m.format || '0.0%';\n    const val = fmt(format)(profData[m.indicator]);\n    return {\n      indicator: m.display,\n      value: val\n    };\n  });\n  return wide;\n};\n\nconst filterForScatter = (data) => (\n  _filterByKey(data, 'category', 'Total', false)\n);\n\nconst filterForBar = (data, region, variable) => {\n  let out;\n  if (variable === 'community') {\n    if (region === 'Connecticut') {\n      out = _.filter(data, (d) => _.includes(['1_state', '2_region'], d.level));\n    } else {\n      out =  _.filter(data, (d) => _.includes([region, 'Connecticut'], d.region));\n    }\n    out = _.filter(out, { 'category': 'Total' });\n  } else {\n    out = _.filter(data, { 'name': region });\n  }\n  return out;\n};\n\nconst getMapData = (data, indicator) => (\n  _.chain(data)\n    .map((d) => ({\n      name: d.name,\n      value: d[indicator]\n    }))\n    .keyBy('name')\n    .value()\n);\n\nconst filterTownLvl = (data) => (\n  _.chain(data)\n    .mapValues((v, k) => _.filter(v, (d) => d.bytown))\n    .omitBy(_.isEmpty)\n    .value()\n);\n\n/////////////// metadata\nconst getVariables = (data) => (\n  _.chain(data)\n    .flatMap(_.keys)\n    .uniq()\n    .pull('name', 'category', 'group', 'level', 'region')\n    .sort()\n    .reverse()\n    .value()\n);\n\nconst getSubVariables = (variables, v1) => (\n  _.without(variables, v1)\n);\n\nconst getComparables = (variables) => (\n  _.drop(variables, 1).concat(_.take(variables, 1))\n);\n\nconst getQMeta = (meta, indicator) => (\n  _filterByKey(meta, 'indicator', indicator, true)\n);\n\nconst getRegions = (data) => (\n  _.chain(data)\n    .filter((d) => _.includes(['1_state', '2_region'], d.level))\n    .map('name')\n    .uniq()\n    // .filter((d) => d.search(/(Inner|Outer) Ring/) === -1)\n    .filter((d) => !RegExp('(Inner|Outer) Ring').test(d))\n    .value()\n);\n\nconst getNestedGrps = (data) => (\n  _.chain(data)\n    .groupBy('category')\n    .mapValues((d) => _.map(d, 'group'))\n    .value()\n);\n\nconst tblColumns = (row, omit) => (\n  _.chain(row)\n    .keys()\n    .difference(omit)\n    .value()\n);\n\nconst objToArray = (obj, key, value) => {\n  return _.chain(obj)\n    .mapValues((v, k) => ({ [key]: k, [value]: v }))\n    .values()\n    .value();\n};\n\nconst filterByString = (meta, string) => {\n  const matchKeys = _.chain(meta)\n    .keys()\n    .map((d) => d.indexOf(string) >= 0 ? d : false)\n    .compact()\n    .value();\n  return _.pick(meta, matchKeys);\n};\n\n\n\n/////////////// viz\nconst createScales = (data, pals, variable, rev) => {\n  const n = _.size(pals);\n  const groups = _.chain(data)\n    .map(variable)\n    .uniq()\n    .value();\n  let pal;\n  if (rev) {\n    pal = _.takeRight(pals[n], groups.length).reverse();\n  } else {\n    pal = _.take(pals[n], groups.length);\n  }\n  // let pal = rev ? _.takeRight(pals[n], groups.length) : _.take(pals[n], groups.length);\n  const color = scaleOrdinal(groups, pal);\n  const rad = scaleOrdinal(groups, [8, 7, 5, 3, 3, 3]);\n  return { colorscale: color, sizescale: rad };\n};\n\nconst getMaxes = (data) => {\n  // const numberCols = _.pickBy(data[0], _.isNumber);\n  const numberCols = _.chain(data[0])\n    .pickBy(_.isNumber)\n    .keys()\n    .value();\n  return _.chain(numberCols)\n    .map((c) => ({\n      q: c,\n      max: _.chain(data).map(c).max().value()\n    }))\n    .keyBy('q')\n    .mapValues('max')\n    .value();\n};\n\nconst makeChoroScale = (data, scheme, nBrks) => {\n  const vals = _.chain(data)\n    .mapValues('value')\n    .values()\n    .sort()\n    .value();\n  if (!vals.length) {\n    return scaleThreshold().domain([0, 1]).range(['#ccc']);\n  } else {\n    const brks = ckmeans(vals, nBrks).map((d) => d[0]).slice(1);\n    return scaleThreshold()\n      .domain(brks)\n      .range(scheme[nBrks]);\n  }\n};\n\nconst makeTooltip = (name, value, format) => (\n  `${ name }: ${ fmt(format)(value) }`\n);\n\n/////////////////// geography\nconst getBounds = (geo) => {\n  const b = topojson.bbox(geo);\n  return [[ b[1], b[0] ], [ b[3], b[2] ]];\n};\n\nconst makeGeoJson = (shp) => (\n  topojson.feature(shp, shp.objects.town)\n);\n\n\nexport{\n\tcleanIdxLabels,\n\tcompileHeader,\n\tcreateScales,\n\tfilterForScatter,\n\tgetRegions,\n\tgetVariables,\n  cleanHdrLabels,\n  cleanKeys,\n  filterByString,\n  filterForBar,\n  filterTownLvl,\n  fmt,\n  getBounds,\n  getComparables,\n  getMapData,\n  getMaxes,\n  getNestedGrps,\n  getProfile,\n  getQMeta,\n  getSubVariables,\n  makeChoroScale,\n  makeGeoJson,\n  makeTooltip,\n  objToArray,\n  tblColumns,\n  titleLabel,\n  wrapTspan\n};\n","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport '../styles/Header.css';\n\nconst Header = (props) => (\n  <div className='Header'>\n    <Navbar expand='md' variant='light' bg='light'>\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      <Navbar.Collapse id='basic-navbar-nav'>\n        <Nav variant='pills'>\n          { props.hdrs.map((h) => (\n            <LinkContainer to={ '/' + h.location } key={ `page-${ h.location }` }>\n              <Nav.Link>{ h.title }</Nav.Link>\n            </LinkContainer>\n          )) }\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nimport '../styles/Stage.css';\nimport { cleanHdrLabels, compileHeader } from './utils.js';\n\nconst Stage = (props) => {\n  const hdr = compileHeader(props.type)({ ...props });\n\n  return (\n    <div className='Stage'>\n      <Card>\n        <Card.Header as='h3'>\n          { hdr }\n          { props.hdrComponents || null }\n        </Card.Header>\n        <Card.Body className={ props.flush && 'p-0' }>\n          { props.children }\n        </Card.Body>\n        <Card.Footer className='text-right axis-title'>{ props.axisLbl || null }</Card.Footer>\n      </Card>\n    </div>\n  );\n};\n\nexport default Stage;\n","import React from 'react';\nimport { LegendThreshold, LegendOrdinal } from '@vx/legend';\nimport { fmt } from './utils.js';\n\nimport '../styles/Legend.css';\n\nconst legendTypes = {\n  threshold: LegendThreshold,\n  ordinal: LegendOrdinal\n};\n\nconst Legend = (props) => {\n  const LegendByType = legendTypes[props.type];\n  const format = props.labelFormat || ((label) => label ? fmt(props.format)(label) : '');\n  return (\n    <div className='Legend' style={ props.style }>\n      <LegendByType\n        labelFormat={ format }\n        scale={ props.scale }\n      />\n    </div>\n  );\n};\n\n\n\nexport default Legend;\n","import React from 'react';\n\nimport '../styles/Tooltip.css';\n\nconst Tip = (props) => {\n  const lbls = props.tipLblr ? props.vs.map(props.tipLblr) : props.vs;\n  const content = props.vs.map((d, i) => (\n    <div key={ `tip-div${ i }` }>\n      <p key={ `tip-p${ i }` }><span key={ `tip${ i }` }>{ lbls[i].length ? `${ lbls[i] }: ` : '' } </span>{ props.numFmt(props.data[d]) }</p>\n    </div>\n));\n\n  return (\n    <div className='Tooltip'>\n      <h5>{ props.data[props.hdr] }</h5>\n      { content }\n    </div>\n  );\n};\n\nexport default Tip;\n","import React from 'react';\nimport { ResponsiveXYFrame } from 'semiotic';\nimport { Vivid } from 'cartocolor';\nimport * as _ from 'lodash';\n\nimport Legend from './Legend';\nimport Tip from './Tip';\nimport '../styles/Chart.css';\n\nimport { cleanIdxLabels, createScales, titleLabel } from './utils.js';\n\nconst Scatterplot = (props) => {\n  const [xAccess, yAccess] = props.vs;\n  const { colorscale, sizescale } = createScales(props.data, Vivid, 'level', false);\n\n  const xRange = [_.min(_.map(props.data, xAccess)), _.max(_.map(props.data, xAccess))];\n  const yRange = [_.min(_.map(props.data, yAccess)), _.max(_.map(props.data, yAccess))];\n  const pad = 0.05;\n  const margin = { top: 10, right: 10, bottom: 60, left: 80 };\n  const fmt = props.numFmt || ((d) => d);\n\n  return (\n    <div className='Chart Scatterplot'>\n      <ResponsiveXYFrame\n        points={ props.data }\n        margin={ margin }\n        size={ [600, 500] }\n        xAccessor={ xAccess }\n        yAccessor={ yAccess }\n        pointStyle={ (d) => ({\n          fill: colorscale(d.level),\n          stroke: colorscale(d.level),\n          r: sizescale(d.level),\n          opacity: 0.8\n        }) }\n        xExtent={ [xRange[0] * (1 - pad), xRange[1] * (1 + pad)] }\n        yExtent={ [yRange[0] * (1 - pad), yRange[1] * (1 + pad)] }\n        axes={[\n          { orient: 'left', label: cleanIdxLabels(yAccess), baseline: 'under', tickFormat: fmt },\n          { orient: 'bottom', label: cleanIdxLabels(xAccess), baseline: 'under', tickFormat: fmt }\n        ]}\n        responsiveWidth={ true }\n        // foregroundGraphics={ <Legend color={ colorscale } size={ sizescale } margin={ margin } /> }\n        hoverAnnotation={ [(d) => ({\n          type: 'frame-hover',\n          color: colorscale(d.level)\n        })] }\n        svgAnnotationRules={ ({ screenCoordinates, d }) => (d && d.type === 'frame-hover') ? hover(d, screenCoordinates[0], screenCoordinates[1], colorscale) : null }\n        tooltipContent={ (d) => (\n          <Tip data={ d.data } type='scatter'\n            vs={ props.vs }\n            hdr='name'\n            tipLblr={ (d) => cleanIdxLabels(d).match(/[A-Z]/g).join('') }\n            numFmt={ fmt }\n          />\n        ) }\n      />\n      <Legend\n        type='ordinal'\n        scale={ colorscale }\n        labelFormat={ (d) => titleLabel(d) }\n        style={{\n          right: '4px',\n          bottom: '45px'\n        }}\n      />\n    </div>\n  )\n};\n\n\nconst hover = (d, x, y, color) => (\n  <g key={ `${ hover }-tip` } className='hover-circle'>\n    <circle\n      cx={ x }\n      cy={ y }\n      r={ 12 }\n      fillOpacity={ 1.0 }\n      strokeOpacity={ 1.0 }\n      stroke={ color(d.level) }\n      fill={ color(d.level) }\n    ></circle>\n  </g>\n);\n\nexport default Scatterplot;\n","import React from 'react';\nimport { ResponsiveOrdinalFrame } from 'semiotic';\nimport { Vivid } from 'cartocolor';\n\nimport '../styles/Chart.css';\n\nimport { createScales } from './utils.js';\n\nconst BarChart = (props) => {\n  const { colorscale } = createScales(props.data, Vivid, props.colorVar, props.colorVar === 'category');\n  const fmt = props.numFmt || ((d) => d);\n\n  const labels = props.data.map((d) => ({\n    label: fmt(d[props.rAccess]),\n    [props.oAccess]: d[props.oAccess],\n    [props.rAccess]: d[props.rAccess],\n    type: 'bar-label'\n  }));\n\n  return (\n    <div className='Chart'>\n      <ResponsiveOrdinalFrame\n        data={ props.data }\n        margin={ { top: 10, right: 10, bottom: 10, left: 120 } }\n        oAccessor={ props.oAccess }\n        rAccessor={ props.rAccess }\n        type='bar'\n        oPadding={ 8 }\n        oLabel={ true }\n        projection='horizontal'\n        style={ (d) => ({\n          fill: colorscale(d[props.colorVar]),\n          stroke: 'white',\n          strokeWidth: '1px',\n          opacity: 0.8\n        }) }\n\n        annotations={ labels }\n        svgAnnotationRules={ (d) => lblRules(d, props.oAccess, props.rAccess, fmt) }\n        responsiveWidth={ true }\n        pieceHoverAnnotation={ [{\n          // type: 'desaturation-layer'\n        }, {\n          type: 'highlight',\n          style: (d) => ({\n            opacity: 1.0,\n            stroke: '#444'\n          })\n        }] }\n\n      />\n    </div>\n  );\n};\n\n\nconst IdxBarChart = (props) => {\n  const rAccess = props.vs[0];\n  const oAccess = rAccess === 'community' ? 'name': 'group';\n  const colorVar = rAccess === 'community' ? 'level' : 'category';\n\n  return (\n    <BarChart\n      data={ props.data }\n      oAccess={ oAccess }\n      rAccess={ rAccess }\n      colorVar={ colorVar }\n    />\n  );\n};\n\nconst QBarChart = (props) => {\n  return (\n    <BarChart\n      data={ props.data }\n      oAccess={ 'group' }\n      rAccess={ props.vs[0] }\n      colorVar={ 'category' }\n      numFmt={ props.numFmt }\n    />\n  );\n};\n\n////////// labels\n\n////// check width of bar; if under some amount, positive dx and dark label\nconst lblRules = ({ screenCoordinates, d }, oAccess, rAccess, fmt) => {\n  if (d.type === 'bar-label') {\n    const missing = isNaN(screenCoordinates[0]);\n    const coords = missing ? [0, screenCoordinates[1]] : screenCoordinates;\n    const small = coords[0] < 30;\n    return (\n      <g\n        className={ `direct-label ${ small ? 'dark' : 'light' }` }\n        key={ `lbl-${ d[oAccess] }` }\n        transform={ `translate(${ coords })` }\n      >\n        <text x={ 0 } y={ 0 } dx={ small ? '1.4em' : '-0.3em' } dy={ 3 }>{ fmt(d[rAccess]) }</text>\n      </g>\n    )\n  } else {\n    return null;\n  }\n};\n\nexport { IdxBarChart, QBarChart };\n","import React from 'react';\nimport { Form, Col, Row } from 'react-bootstrap';\nimport { useFormContext } from 'react-hook-form';\nimport { cleanIdxLabels, cleanHdrLabels, getComparables } from './utils.js';\n\nimport '../styles/Controls.css';\n\nconst ScoreMainControls = (props) => {\n  const { register } = useFormContext();\n\n  return (\n    <div className='Controls'>\n      <Form>\n        <Row>\n          <Col>\n            <Form.Group controlId='v1Select'>\n              <Form.Label>Index values by group</Form.Label>\n              <Form.Control as='select' name='v1Select' className='custom-select' ref={ register } onChange={ props.onChange }>\n                { props.variables.map((d, i) => (\n                  <option key={ d + 'v1opt' } value={ d }>{ cleanIdxLabels(d) }</option>\n                )) }\n              </Form.Control>\n            </Form.Group>\n            <Form.Group controlId='regSelect'>\n              <Form.Label>Filter region</Form.Label>\n              <Form.Control as='select' name='regSelect' className='custom-select' ref={ register } onChange={ props.onChange }>\n                { props.regions.map((d, i) => (\n                  <option key={ d + 'regopt' } value={ d }>{ d }</option>\n                )) }\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n};\n\nconst ScoreCompareControls = (props) => {\n  const { register } = useFormContext();\n  const yvariables = getComparables(props.variables);\n\n  return (\n    <div className='Controls'>\n      <Form>\n        <Row>\n          <Col>\n            <Form.Group controlId='v2Select'>\n              <Form.Label>Compare { cleanHdrLabels(props.v1, false) } to a second index</Form.Label>\n              <Form.Control as='select' name='v2Select' className='custom-select' ref={ register }  onChange={ props.onChange }>\n                { yvariables.map((d, i) => (\n                  <option key={ d + 'v2opt' } value={ d }>{ cleanIdxLabels(d) }</option>\n                )) }\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n};\n\nconst SparkControls = (props) => (\n  <div className='Controls SparkControls float-right'>\n    <Form.Check\n      inline\n      custom\n      // default\n      checked={ props.checked }\n      id='show-spark-bars'\n      name='sparkToggle'\n      onChange={ props.onChange }\n      label='Show data bars'\n    />\n  </div>\n);\n\nconst SurveyTopicFragment = (props) => (\n  <React.Fragment>\n    <Form.Group controlId='topicSelect'>\n      <Form.Label>Select a topic</Form.Label>\n      <Form.Control as='select' name='topicSelect' className='custom-select' ref={ props.register } onChange={ props.onChange }>\n        { props.topics.map((d, i) => (\n          <option key={ d + 'topicopt' } value={ d }>{ cleanHdrLabels(d) }</option>\n        )) }\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group controlId='qSelect'>\n      <Form.Label>Select survey question</Form.Label>\n      <Form.Control as='select' name='qSelect' className='custom-select' ref={ props.register } onChange={ props.onChange }>\n        { props.topicMeta.map((d, i) => (\n          <option key={ d.indicator + 'qopt' } value={ d.indicator }>{ d.display }</option>\n        )) }\n      </Form.Control>\n    </Form.Group>\n  </React.Fragment>\n);\n\nconst SurveyMainControls = (props) => {\n  const { register } = useFormContext();\n\n  return (\n    <div className='Controls'>\n      <Form>\n        <Row>\n          <Col>\n            <Form.Group controlId='regSelect'>\n              <Form.Label>Filter region</Form.Label>\n              <Form.Control as='select' name='regSelect' className='custom-select' ref={ register } onChange={ props.onChange }>\n                { props.regions.map((d, i) => (\n                  <option key={ d + 'regopt' } value={ d }>{ d }</option>\n                )) }\n              </Form.Control>\n            </Form.Group>\n\n            <SurveyTopicFragment { ...props } register={ register } />\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n};\n\nconst SurveyProfileControls = (props) => {\n  const { register } = useFormContext();\n  const categories = Object.keys(props.groups);\n\n  return (\n    <div className='Controls'>\n      <Form>\n        <Row>\n          <Col>\n            <Form.Group controlId='grpSelect'>\n              <Form.Label>Select a group</Form.Label>\n              <Form.Control as='select' name='grpSelect' className='custom-select' ref={ register } onChange={ props.onChange }>\n                {\n                  categories.map((d, i) => (\n                    <optgroup label={ d } key={ d + 'optgrp' }>\n                      { props.groups[d].map((e, j) => (\n                        <option value={ e } key={ j + 'grp' }>{ e }</option>\n                      )) }\n                    </optgroup>\n                  ))\n                }\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  )\n};\n\nconst RiskMainControls = (props) => {\n  const { register } = useFormContext();\n\n  return (\n    <div className='Controls'>\n      <Form>\n        <Row>\n          <Col>\n            <SurveyTopicFragment { ...props } register={ register } />\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  )\n};\n\n\n// export default Controls;\nexport { ScoreMainControls, ScoreCompareControls, SurveyMainControls, SurveyProfileControls, SparkControls, RiskMainControls };\n","import React from 'react';\n\nexport const NoteContext = React.createContext({\n  noteOpen: true,\n  handleClose: () => {  }\n});\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\nimport { NoteContext } from './NoteContext.js';\n\nimport '../styles/Intro.css';\n\nconst Intro = (props) => (\n  <NoteContext.Consumer>\n    {\n      ({ noteOpen, handleClose }) => (\n        <div className='Intro'>\n          {noteOpen && <Alert variant='info' dismissible onClose={ handleClose } className='border border-color-info'>\n            <Alert.Heading>A note from DataHaven</Alert.Heading>\n            <ReactMarkdown source={ props.intro['covid'] } escapeHtml={ false } />\n          </Alert>}\n\n          <Alert variant='light' className='border border-color-dark'>\n            <ReactMarkdown source={ props.intro[props.page] } />\n            <p>For more information, visit DataHaven's <a href=\"http://www.ctdatahaven.org/communities\">Communities</a> page or <a href=\"http://www.ctdatahaven.org\">main website</a>.</p>\n          </Alert>\n        </div>\n      )}\n  </NoteContext.Consumer>\n);\n\nexport default Intro;\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport { cleanHdrLabels, tblColumns, fmt, getMaxes } from './utils.js';\n\nimport '../styles/DataTable.css';\n\nconst DataTable = ({ data, v1, meta, spark, sort }) => {\n  const isCommunity = v1 === 'community';\n  const mightOmit = isCommunity ? ['group'] : ['name'];\n  const omit = ['level', 'category', 'region', ...mightOmit];\n\n  // colnames of what will be displayed\n  const colNames = tblColumns(data[0], omit);\n  const maxes = getMaxes(data);\n\n  const cols = colNames.map((col, i) => {\n    let formatter;\n    const isNumber = meta[col] !== undefined;\n    if (isNumber) {\n      if (spark) {\n        formatter = makeSpark(meta[col], col, maxes);\n      } else {\n        formatter = fmt(meta[col]);\n      }\n    } else {\n      formatter = null;\n    }\n    return {\n      dataField: col,\n      text: cleanHdrLabels(col),\n      sort: sort,\n      type: (isNumber ? 'number' : 'string'),\n      classes: (!isNumber ? 'position-sticky' : null),\n      headerClasses: (!isNumber ? 'position-sticky' : null),\n      formatter: formatter,\n      formatExtraData: spark,\n      align: (spark || !isNumber ? 'left' : 'right')\n    };\n  });\n\n  return (\n    <div className='DataTable' id='datatable'>\n      <BootstrapTable\n        bootstrap4\n        hover\n        condensed\n        classes='table-responsive-xl'\n        headerClasses='thead-light'\n        bordered={ true }\n        keyField={ isCommunity ? 'name' : 'group' }\n        data={ data }\n        columns={ cols }\n      />\n    </div>\n  )\n};\n\n\nconst makeSpark = (format, col, maxes) => (cell, row, rowIndex, extraData) => {\n  const max = maxes[col];\n  const scaled = (cell / max) * 100;\n  const w = cell ? (scaled + '%') : 0;\n  return (\n    <div className='spark' style={{ width: w }}>\n      <span className='sparktext'>{ fmt(format)(cell) }</span>\n    </div>\n  )\n};\n\nexport default DataTable;\n","import React, { useState } from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport useForm, { FormContext } from 'react-hook-form';\n\nimport Stage from './Stage';\nimport Scatterplot from './Scatterplot';\nimport { IdxBarChart } from './BarChart';\nimport { ScoreMainControls, ScoreCompareControls, SparkControls } from './Controls';\nimport Intro from './Intro';\nimport DataTable from './DataTable';\nimport { getVariables, getRegions, filterForScatter, filterForBar, cleanIdxLabels } from '../components/utils.js';\n\nimport '../styles/Dash.css';\n\n\nconst Scores = ({ index_data, index_comps, meta, intro }) => {\n  const formMethods = useForm({\n    mode: 'onChange'\n  });\n  const variables = getVariables(index_data);\n  const initValues = {\n    v1: variables[0],\n    v2: variables[1],\n    region: 'Connecticut'\n  };\n\n// state\n  const [v1, setV1] = useState(initValues.v1);\n  const [v2, setV2] = useState(initValues.v2);\n  const [region, setRegion] = useState(initValues.region);\n  const [spark, setSpark] = useState(true);\n\n// event handling\n  const onFormChange = (data, e) => {\n    const { v1Select, v2Select, regSelect } = formMethods.getValues();\n    setV1(v1Select);\n    setV2(v2Select);\n    setRegion(regSelect);\n  };\n  const onToggleChange = (e) => {\n    setSpark(e.target.checked);\n  };\n\n  return (\n    <div className='Dash Scores'>\n      <Container>\n        <header className=\"App-header\">\n          <h1>DataHaven Index scores</h1>\n        </header>\n\n        <Row><Intro page='scores' intro={ intro } /></Row>\n\n        <header className='App-header'>\n          <h2>How do groups and towns compare?</h2>\n        </header>\n        <Row className='align-items-end'>\n          <Col md={ 6 }>\n            <FormContext { ...formMethods }>\n              <ScoreMainControls\n                onChange={ formMethods.handleSubmit(onFormChange) }\n                variables={ variables }\n                regions={ getRegions(index_data) }\n                v1={ v1 }\n              />\n            </FormContext>\n\n            { /* bar chart */ }\n            <Stage\n              type='lblBy2'\n              lbl={ cleanIdxLabels(v1) }\n              grouping={ region }\n              dataBy={ v1 === 'community' ? 'location' : 'group' }\n              axisLbl={ 'Scores 0 (worse) through 1,000 (better)' }\n            >\n              <IdxBarChart\n                data={ filterForBar(index_data, region, v1) }\n                vs={ [v1] }\n              />\n            </Stage>\n          </Col>\n\n          <Col md={ 6 } className='second'>\n            <FormContext { ...formMethods }>\n              <ScoreCompareControls\n                onChange={ formMethods.handleSubmit(onFormChange) }\n                variables={ variables }\n                v1={ v1 }\n                v2={ v2 }\n              />\n            </FormContext>\n\n            { /* scatterplot */ }\n            <Stage\n              lbls={ [v1, v2].map((d) => cleanIdxLabels(d)) }\n              type='versus'\n              axisLbl={ 'Scores 0 (worse) through 1,000 (better)' }\n            >\n              <Scatterplot\n                data={ filterForScatter(index_data, region) }\n                vs={ [v1, v2] }\n              />\n            </Stage>\n          </Col>\n        </Row>\n\n        <hr />\n\n        <Row>\n          <Col>\n            <h2>What are these scores made of?</h2>\n\n            <Stage\n              grouping={ region }\n              type='lblBy2'\n              lbl={ 'Components of the ' + cleanIdxLabels(v1) }\n              dataBy={ v1 === 'community' ? 'location' : 'group' }\n              axisLbl={ v1 === 'community' ? '' : 'Share of adults' }\n              flush\n              hdrComponents={ <SparkControls checked={ spark } onChange={ onToggleChange } /> }\n            >\n              <DataTable v1={ v1 } meta={ meta[v1] }\n                data={ filterForBar(index_comps[v1], region, v1) }\n                spark={ spark }\n                sort={ true }\n              />\n            </Stage>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Scores;\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport '../styles/Profile.css';\n\nconst Profile = (props) => {\n  const cols = props.cols || ['Indicator', 'Value'];\n  const columns = [{\n    dataField: 'indicator',\n    text: cols[0],\n    sort: false,\n    headerStyle: () => ({ width: '80%' })\n  }, {\n    dataField: 'value',\n    text: cols[1],\n    sort: false,\n    align: 'right',\n    // formatter: fmt('0.0%'),\n    classes: 'text-right',\n    headerStyle: () => ({ width: '20%' })\n  }];\n\n  return (\n    <div className='Profile DataTable' id='profile'>\n      <BootstrapTable\n        bootstrap4\n        classes='table-responsive-sm'\n        headerClasses='thead-light'\n        bordered={ true }\n        keyField={ 'indicator' }\n        data={ props.data }\n        columns={ columns }\n      />\n    </div>\n  )\n};\n\nexport default Profile;\n","import React, { useState } from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport useForm, { FormContext } from 'react-hook-form';\n\nimport Stage from './Stage';\nimport { QBarChart } from './BarChart';\nimport { SurveyMainControls, SurveyProfileControls } from './Controls';\nimport Intro from './Intro';\nimport Profile from './Profile';\nimport { cleanHdrLabels, getQMeta, getProfile, getNestedGrps, fmt } from '../components/utils.js';\n\nconst Survey = ({ cws_data, meta, intro }) => {\n  const formMethods = useForm({\n    mode: 'onChange'\n  });\n  const topics = Object.keys(meta);\n  const regions = Object.keys(cws_data);\n\n  const initValues = {\n    region: regions[0],\n    topic: topics[0],\n    indicator: meta[topics[0]][0].indicator,\n    group: 'Total'\n  };\n\n// state\n  const [region, setRegion] = useState(initValues.region);\n  const [topic, setTopic] = useState(initValues.topic);\n  const [indicator, setIndicator] = useState(initValues.indicator);\n  const [group, setGroup] = useState(initValues.group);\n\n// event handling\n  const onChange = (data, e) => {\n    const { regSelect, topicSelect, qSelect, grpSelect } = formMethods.getValues();\n\n    // don't like setting state like this but oh well\n    const q0 = meta[topicSelect][0].indicator;\n    const g0 = initValues.group;\n    if (e.target.name === 'topicSelect' || e.target.name === 'regSelect') {\n      formMethods.setValue('qSelect', q0);\n      formMethods.setValue('grpSelect', g0);\n      setIndicator(q0);\n      setGroup(g0);\n    } else {\n      setIndicator(qSelect);\n      setGroup(grpSelect);\n    }\n    setRegion(regSelect);\n    setTopic(topicSelect);\n\n  };\n\n  const qDisplay = getQMeta(meta[topic], indicator) || '';\n  const groups = getNestedGrps(cws_data[region][topic]);\n  const profileData = getProfile(cws_data[region][topic], 'group', group, meta[topic]);\n\n  return (\n    <div className='Dash Survey'>\n      <Container>\n        <header className=\"App-header\">\n          <h1>2018 Community Wellbeing Survey</h1>\n        </header>\n\n\n        <Row><Intro page='survey' intro={ intro } /></Row>\n\n        <Row className=''>\n          <Col md={ 6 }>\n            <FormContext { ...formMethods }>\n              <SurveyMainControls\n                onChange={ formMethods.handleSubmit(onChange) }\n                topics={ topics }\n                regions={ regions }\n                topicMeta={ meta[topic] }\n              />\n            </FormContext>\n          </Col>\n          <Col md={ 6 }>\n\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={ 6 }>\n            { /* bar chart */ }\n            <Stage\n              type='lblBy2'\n              lbl={ qDisplay.display }\n              dataBy={ 'group' }\n              grouping={ region }\n              axisLbl={ qDisplay.denom }\n            >\n              <QBarChart\n                data={ cws_data[region][topic] }\n                vs={ [indicator] }\n                numFmt={ fmt('0.0%') }\n              />\n            </Stage>\n          </Col>\n\n          <Col md={ 6 } className='second'>\n            <FormContext { ...formMethods }>\n              <SurveyProfileControls\n                onChange={ formMethods.handleSubmit(onChange) }\n                groups={ groups }\n                topicMeta={ meta[topic] }\n              />\n            </FormContext>\n            { /* profile */ }\n            <Stage\n              type='colon'\n              lbl={ cleanHdrLabels(topic) }\n              grouping={ region }\n              dataBy={ group }\n              axisLbl={ 'Share of adults' }\n              flush\n            >\n              <Profile\n                data={ profileData }\n                topic={ topic }\n                meta={ meta[topic] }\n                cols={ ['Survey question', 'Value'] }\n              />\n            </Stage>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Survey;\n","import React from 'react';\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\nimport { getBounds, makeGeoJson, makeTooltip } from './utils.js';\nimport Legend from './Legend';\n\nimport '../styles/Chart.css';\n\nexport default class Choropleth extends React.Component {\n  getStyle = (feature) => {\n    const name = feature.properties.name;\n    const fillColor = this.props.data[name] ? this.props.colorscale(this.props.data[name].value) : '#ccc';\n    return {\n      fillColor,\n      color: '#333',\n      weight: 0.5,\n      opacity: 1,\n      fillOpacity: 0.75\n    };\n  };\n\n  handleFeature = (feature, layer) => {\n    const name = feature.properties.name;\n    layer\n      .on('mouseover', this.featureHilite)\n      .on('mouseout', this.featureUnhilite);\n    layer.bindTooltip(() => (\n      makeTooltip(name, this.props.data[name] ? this.props.data[name].value : null, this.props.meta.format)),\n      { direction: 'top', offset: [0, -20], className: 'custom-tip' }\n    );\n  };\n\n  featureHilite = ({ target }) => {\n    target.setStyle({\n      fillOpacity: 0.95,\n      weight: 1\n    });\n\n  };\n  featureUnhilite = ({ target }) => {\n    target.setStyle({\n      fillOpacity: 0.75,\n      weight: 0.5\n    });\n  };\n\n  render() {\n    const bbox = getBounds(this.props.shape);\n    const geo = makeGeoJson(this.props.shape);\n\n    return (\n      <div className='Chart Choropleth'>\n        <Map\n          bounds={ bbox }\n          zoomSnap={ 0.5 }\n          zoomDelta={ 0.5 }\n          scrollWheelZoom={ false }\n        >\n          <TileLayer\n            url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}.{ ext }\"\n            attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n            subdomains=\"abcd\"\n            minZoom={ 8 }\n            maxZoom={ 16 }\n            ext=\"png\"\n            opacity={ 0.4 }\n          />\n          <GeoJSON\n            key={ (feature) => feature.properties.name }\n            data={ geo }\n            style={ this.getStyle }\n            interactive={ true }\n            onEachFeature={ this.handleFeature }\n            onClick={ this.props.onClick }\n          />\n        </Map>\n\n        <Legend\n          scale={ this.props.colorscale }\n          format={ this.props.meta.format }\n          type='threshold'\n          style={ {\n            right: 0,\n            bottom: 0\n          } }\n        />\n      </div>\n    )\n  }\n}\n","import React, { useState } from 'react';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport useForm, { FormContext } from 'react-hook-form';\nimport { schemeBuPu as palette } from 'd3-scale-chromatic';\n\nimport Stage from './Stage';\nimport { RiskMainControls } from './Controls';\nimport Intro from './Intro';\nimport Choropleth from './Choropleth';\nimport Profile from './Profile';\n\nimport { getQMeta, getMapData, makeChoroScale, cleanHdrLabels, getProfile } from './utils.js';\n\nconst Risks = ({ town_data, meta, shape, intro }) => {\n  const formMethods = useForm({\n    mode: 'onChange'\n  });\n  const topics = Object.keys(meta);\n  const initValues = {\n    topic: topics[0],\n    indicator: meta[topics[0]][0].indicator\n  };\n\n  const towns = Object.keys(getMapData(town_data[initValues.topic], initValues.indicator));\n  // const towns = Object.keys(town_data[initValues.indicator][0]);\n  const [topic, setTopic] = useState(initValues.topic);\n  const [indicator, setIndicator] = useState(initValues.indicator);\n  const [town, setTown] = useState(towns[0]);\n\n  const onChange = (data, e) => {\n    const { topicSelect, qSelect } = formMethods.getValues();\n    const q0 = meta[topicSelect][0].indicator;\n    if (e.target.name === 'topicSelect') {\n      formMethods.setValue('qSelect', q0);\n      setIndicator(q0);\n    } else {\n      setIndicator(qSelect);\n    }\n    setTopic(topicSelect);\n  };\n\n  const onFeatureClick = ({ layer }) => {\n    setTown(layer.feature.properties.name);\n  };\n\n  const qDisplay = getQMeta(meta[topic], indicator) || '';\n  const mapData = getMapData(town_data[topic], indicator);\n  const profileData = getProfile(town_data[topic], 'name', town, meta[topic]);\n\n  return (\n    <div className='Dash Risks'>\n      <Container>\n        <header className='App-header'>\n          <h1>2018 Community Wellbeing Survey</h1>\n        </header>\n\n        <Row>\n          <Intro page='risks' intro={ intro } />\n        </Row>\n\n        <Row>\n          <Col md={ 6 }>\n            <FormContext { ...formMethods }>\n              <RiskMainControls\n                onChange={ formMethods.handleSubmit(onChange) }\n                topics={ topics }\n                topicMeta={ meta[topic] }\n              />\n            </FormContext>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={ 6 }>\n            <Stage\n              type='lblBy'\n              lbl={ qDisplay.display }\n              dataBy={ 'town' }\n              axisLbl={ qDisplay.denom }\n              flush\n            >\n              <Choropleth\n                data={ mapData }\n                shape={ shape }\n                colorscale={ makeChoroScale(mapData, palette, 5) }\n                meta={ { format: '.0%' } }\n                onClick={ onFeatureClick }\n              />\n            </Stage>\n          </Col>\n          <Col md={ 6 } className='second'>\n            <Stage\n              type='comma'\n              lbl={ cleanHdrLabels(topic) }\n              grouping={ town }\n              axisLbl={ qDisplay.denom }\n              flush\n            >\n              <Profile\n                data={ profileData }\n                topic={ topic }\n                meta={ meta[topic] }\n                cols={ [ 'Survey question', 'Value' ] }\n              />\n            </Stage>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n};\n\nexport default Risks;\n","import React from 'react';\nimport { Row, Col, Container, Alert } from 'react-bootstrap';\nimport '../styles/Footer.css';\n\nconst Footer = (props) => {\n  const dl = `https://query.data.world/s/${ props.urls.slug }`;\n  return (\n    <div className='Footer'>\n      <Container>\n        <hr />\n        <Row>\n          <Col>\n            <Alert variant='light' className='border'>\n              <Alert.Heading >Download this data</Alert.Heading>\n              <p>\n                {`Download ${ props.display.toLowerCase() } data`} <a href={ dl }>here</a>, filter and analyze data online on <a href={ props.dw }>data.world</a> (requires free sign-up), or download/clone from <a href={ props.urls.github }>GitHub</a> (advanced users).\n              </p>\n\n              <p>For source and methodology information, see the <a href='https://ctdatahaven.org/reports'>2019 DataHaven Community Index reports.</a></p>\n            </Alert>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport { Switch, Route, Redirect, useLocation } from 'react-router-dom';\nimport { objToArray, filterByString, filterTownLvl } from './components/utils.js';\n\nimport './App.css';\n\nimport Header from './components/Header';\nimport Scores from './components/Scores';\nimport Survey from './components/Survey';\nimport Risks from './components/Risks';\nimport Footer from './components/Footer';\nimport { NoteContext } from './components/NoteContext.js';\n\n// to scores\nimport index_data from './data/index_scatterplot.json';\nimport index_comps from './data/index_components.json';\nimport score_meta from './data/score_meta.json';\n// to survey\nimport cws_data from './data/cws_indicators.json';\nimport cws_meta from './data/cws_meta.json';\nimport dl_meta from './data/downloads.json';\n// to risk by town\nimport town_data from './data/cws_health_by_town.json';\nimport town_topo from './data/town_topo.json';\n// intros\nimport intro_txt from './data/intro_text.json';\n\n\nconst hdrs = {\n  survey: 'Wellbeing indicators',\n  risks: 'Health risks by town',\n  scores: 'Index scores'\n};\n\nconst useDownload = () => {\n  const location = useLocation().pathname.substring(1);\n  return {\n    location: location,\n    urls: dl_meta[location],\n    dw: 'https://data.world/camille86/cws2018',\n    display: hdrs[location]\n  };\n};\n\nconst App = () => {\n  const download = useDownload();\n  const [noteOpen, setNoteOpen] = useState(true);\n  const handleClose = () => {\n    setNoteOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header hdrs={ objToArray(hdrs, 'location', 'title') } />\n\n      <Switch>\n        <Route exact path='/' render={ () => <Redirect to='/survey' /> } />\n        <Route exact path='/survey'>\n          <NoteContext.Provider value={ { noteOpen, handleClose } }>\n            <Survey\n              cws_data={ cws_data }\n              meta={ cws_meta }\n              intro={ intro_txt }\n            />\n          </NoteContext.Provider>\n        </Route>\n        <Route exact path='/risks'>\n          <NoteContext.Provider value={ { noteOpen, handleClose } }>\n            <Risks\n              town_data={ town_data }\n              meta={ filterTownLvl(filterByString(cws_meta, 'health')) }\n              shape={ town_topo }\n              intro={ intro_txt }\n            />\n          </NoteContext.Provider>\n        </Route>\n        <Route exact path='/scores'>\n          <NoteContext.Provider value={ { noteOpen, handleClose } }>\n            <Scores\n              index_data={ index_data }\n              index_comps={ index_comps }\n              meta={ score_meta }\n              intro={ intro_txt }\n            />\n          </NoteContext.Provider>\n        </Route>\n      </Switch>\n      { download.location.length ? <Footer { ...download } /> : null }\n\n    </div>\n  );\n};\n\n//////////////////\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'leaflet/dist/leaflet.css';\n// import './styles/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <Router basename={ process.env.PUBLIC_URL + '/' }>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}